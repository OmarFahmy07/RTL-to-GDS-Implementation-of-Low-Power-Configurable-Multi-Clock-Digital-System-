`timescale 1 ns / 1 ps

module SYS_TOP_tb();
    
    reg REF_CLK_tb;
    reg RX_CLK_tb;
    wire TX_CLK_tb; // Generated by the clock divider
    
    reg RST_tb;
    wire TOP_RX_IN_tb;
    wire TOP_TX_OUT_tb;
    wire TOP_PARITY_ERROR_tb;
    wire TOP_STOP_ERROR_tb;
    
    reg [7:0] MASTER_TX_P_DATA;
    reg MASTER_TX_DATA_VALID;
    wire [7:0] MASTER_RX_P_DATA;
    wire MASTER_RX_DATA_VALID;
    wire MASTER_RX_PAR_ERR;
    wire MASTER_RX_STP_ERR;
    wire MASTER_TX_BUSY;
    
    localparam REF_CLK_PERIOD = 20;
    localparam RX_CLK_PERIOD  = 3255.208; // 307.2 kHz
    
    initial
    begin
        $dumpfile("SYS_TOP.vcd");
        $dumpvars;
        
        initialize();
        
        reset();
        
        // UART configuration
        UART_Config();
        
        // Clock divider configuration
        ClkDiv_Config();
        
        /* Test case 1 : testing register file write command by writing the value 28 in reg 0 (i.e. operand A) */
        test_case1();
        
        /* Test case 2 : testing register file write command by writing the value 4 in reg 1 (i.e. operand B) */
        test_case2();
        
        /* Test case 3 : testing register file read command by reading reg 0 (i.e. operand A) */
        test_case3();
        
        /* Test case 4 : testing register file read command by reading reg 1 (i.e. operand B) */
        test_case4();
        
        /* Test case 5 : testing ALU operation with no operands command - Addition */
        test_case5();
        
        /* Test case 6 : testing ALU operation with no operands command - OR */
        test_case6();
        
        /* Test case 7 : testing ALU operation with operands command - Division */
        test_case7();
        
        /* Test case 8 : testing ALU operation with operands command with a result of more than 8 bits - Multiplication */
        test_case8();
        
        /* Test case 9 : testing ALU operation with operands command with a result of more than 8 bits - Shift */
        test_case9();
        
        $finish;
        
    end
    
    task initialize;
        begin
            REF_CLK_tb           = 1'b0;
            RX_CLK_tb            = 1'b0;
            MASTER_TX_P_DATA     = 'd0;
            MASTER_TX_DATA_VALID = 1'b0;
        end
    endtask
    
    task reset;
        begin
            RST_tb = 1'b1;
            #1
            RST_tb = 1'b0;
            #1
            RST_tb = 1'b1;
        end
    endtask
    
    task UART_Config;
        begin
            //Frame 0 (Register file write command 0xAA)
            wait(!MASTER_TX_BUSY);
            MASTER_TX_P_DATA     = 'hAA;
            MASTER_TX_DATA_VALID = 1'b1;
            wait(MASTER_TX_BUSY);
            MASTER_TX_DATA_VALID = 1'b0;
            #1
            wait(!MASTER_TX_BUSY);
            //Frame 1 (Address - REG2)
            MASTER_TX_P_DATA     = 'd2;
            MASTER_TX_DATA_VALID = 1'b1;
            wait(MASTER_TX_BUSY);
            MASTER_TX_DATA_VALID = 1'b0;
            #1
            wait(!MASTER_TX_BUSY);
            //Frame 2 (UART configuration)
            MASTER_TX_P_DATA     = 8'b0010_0001;
            MASTER_TX_DATA_VALID = 1'b1;
            wait(MASTER_TX_BUSY);
            MASTER_TX_DATA_VALID      = 1'b0;
            wait(DUT.U0_Reg_File.REG2 == 8'b0010_0001);
            $display("UART Configuration Succeeded");
        end
    endtask
    
    task ClkDiv_Config;
        begin
            //Frame 0 (Register file write command 0xAA)
            wait(!MASTER_TX_BUSY);
            MASTER_TX_P_DATA     = 'hAA;
            MASTER_TX_DATA_VALID = 1'b1;
            wait(MASTER_TX_BUSY);
            MASTER_TX_DATA_VALID = 1'b0;
            #1
            wait(!MASTER_TX_BUSY);
            //Frame 1 (Address - REG3)
            MASTER_TX_P_DATA     = 'd3;
            MASTER_TX_DATA_VALID = 1'b1;
            wait(MASTER_TX_BUSY);
            MASTER_TX_DATA_VALID = 1'b0;
            #1
            wait(!MASTER_TX_BUSY);
            //Frame 2 (Clock divider configuration)
            MASTER_TX_P_DATA     = 8'b0000_1000;
            MASTER_TX_DATA_VALID = 1'b1;
            wait(MASTER_TX_BUSY);
            MASTER_TX_DATA_VALID      = 1'b0;
            wait(DUT.U0_Reg_File.REG3 == 8'b0000_1000);
            $display("Clock Divider Configuration Succeeded");
        end
    endtask
    
    task test_case1;
        begin
            //Frame 0 (Register file write command 0xAA)
            wait(!MASTER_TX_BUSY);
            MASTER_TX_P_DATA     = 'hAA;
            MASTER_TX_DATA_VALID = 1'b1;
            wait(MASTER_TX_BUSY);
            MASTER_TX_DATA_VALID = 1'b0;
            #1
            wait(!MASTER_TX_BUSY);
            //Frame 1 (Address - REG0)
            MASTER_TX_P_DATA     = 'd0;
            MASTER_TX_DATA_VALID = 1'b1;
            wait(MASTER_TX_BUSY);
            MASTER_TX_DATA_VALID = 1'b0;
            #1
            wait(!MASTER_TX_BUSY);
            //Frame 2 (Write the value 28)
            MASTER_TX_P_DATA     = 'd28;
            MASTER_TX_DATA_VALID = 1'b1;
            wait(MASTER_TX_BUSY);
            MASTER_TX_DATA_VALID      = 1'b0;
            wait(DUT.U0_Reg_File.REG0 == 'd28);
            $display("Test case 1 passed");
        end
    endtask
    
    task test_case2;
        begin
            //Frame 0 (Register file write command 0xAA)
            wait(!MASTER_TX_BUSY);
            MASTER_TX_P_DATA     = 'hAA;
            MASTER_TX_DATA_VALID = 1'b1;
            wait(MASTER_TX_BUSY);
            MASTER_TX_DATA_VALID = 1'b0;
            #1
            wait(!MASTER_TX_BUSY);
            //Frame 1 (Address - REG1)
            MASTER_TX_P_DATA     = 'd1;
            MASTER_TX_DATA_VALID = 1'b1;
            wait(MASTER_TX_BUSY);
            MASTER_TX_DATA_VALID = 1'b0;
            #1
            wait(!MASTER_TX_BUSY);
            //Frame 2 (Write the value 4)
            MASTER_TX_P_DATA     = 'd4;
            MASTER_TX_DATA_VALID = 1'b1;
            wait(MASTER_TX_BUSY);
            MASTER_TX_DATA_VALID      = 1'b0;
            wait(DUT.U0_Reg_File.REG1 == 'd4);
            $display("Test case 2 passed");
        end
    endtask
    
    task test_case3;
        begin
            //Frame 0 (Register file read command 0xBB)
            wait(!MASTER_TX_BUSY);
            MASTER_TX_P_DATA     = 'hBB;
            MASTER_TX_DATA_VALID = 1'b1;
            wait(MASTER_TX_BUSY);
            MASTER_TX_DATA_VALID = 1'b0;
            #1
            wait(!MASTER_TX_BUSY);
            //Frame 1 (Address - REG0)
            MASTER_TX_P_DATA     = 'd0;
            MASTER_TX_DATA_VALID = 1'b1;
            wait(MASTER_TX_BUSY);
            MASTER_TX_DATA_VALID = 1'b0;
            wait(MASTER_RX_DATA_VALID);
            if (MASTER_RX_P_DATA == 'd28)
            begin
                $display("Test case 3 passed");
            end
            else
            begin
                $display("Test case 3 failed");
            end
        end
    endtask
    
    task test_case4;
        begin
            //Frame 0 (Register file read command 0xBB)
            wait(!MASTER_TX_BUSY);
            MASTER_TX_P_DATA     = 'hBB;
            MASTER_TX_DATA_VALID = 1'b1;
            wait(MASTER_TX_BUSY);
            MASTER_TX_DATA_VALID = 1'b0;
            #1
            wait(!MASTER_TX_BUSY);
            //Frame 1 (Address - REG1)
            MASTER_TX_P_DATA     = 'd1;
            MASTER_TX_DATA_VALID = 1'b1;
            wait(MASTER_TX_BUSY);
            MASTER_TX_DATA_VALID = 1'b0;
            wait(MASTER_RX_DATA_VALID);
            if (MASTER_RX_P_DATA == 'd4)
            begin
                $display("Test case 4 passed");
            end
            else
            begin
                $display("Test case 4 failed");
            end
        end
    endtask
    
    task test_case5;
        begin
            //Frame 0 (ALU operation with no operands command 0xDD)
            wait(!MASTER_TX_BUSY);
            MASTER_TX_P_DATA     = 'hDD;
            MASTER_TX_DATA_VALID = 1'b1;
            wait(MASTER_TX_BUSY);
            MASTER_TX_DATA_VALID = 1'b0;
            #1
            wait(!MASTER_TX_BUSY);
            //Frame 1 (ALU Operation - Addition)
            MASTER_TX_P_DATA     = 'd0;
            MASTER_TX_DATA_VALID = 1'b1;
            wait(MASTER_TX_BUSY);
            MASTER_TX_DATA_VALID = 1'b0;
            wait(MASTER_RX_DATA_VALID);
            if (MASTER_RX_P_DATA == 'd32)
            begin
                $display("Test case 5 passed");
            end
            else
            begin
                $display("Test case 5 failed");
            end
        end
    endtask
    
    task test_case6;
        begin
            //Frame 0 (ALU operation with no operands command 0xDD)
            wait(!MASTER_TX_BUSY);
            MASTER_TX_P_DATA     = 'hDD;
            MASTER_TX_DATA_VALID = 1'b1;
            wait(MASTER_TX_BUSY);
            MASTER_TX_DATA_VALID = 1'b0;
            #1
            wait(!MASTER_TX_BUSY);
            //Frame 1 (ALU Operation - OR)
            MASTER_TX_P_DATA     = 'b0101;
            MASTER_TX_DATA_VALID = 1'b1;
            wait(MASTER_TX_BUSY);
            MASTER_TX_DATA_VALID = 1'b0;
            wait(MASTER_RX_DATA_VALID);
            if (MASTER_RX_P_DATA == 'd28)
            begin
                $display("Test case 6 passed");
            end
            else
            begin
                $display("Test case 6 failed");
            end
        end
    endtask
    
    task test_case7;
        begin
            //Frame 0 (ALU operation with operands command 0xCC)
            wait(!MASTER_TX_BUSY);
            MASTER_TX_P_DATA     = 'hCC;
            MASTER_TX_DATA_VALID = 1'b1;
            wait(MASTER_TX_BUSY);
            MASTER_TX_DATA_VALID = 1'b0;
            #1
            wait(!MASTER_TX_BUSY);
            //Frame 1 (Operand A)
            wait(!MASTER_TX_BUSY);
            MASTER_TX_P_DATA     = 'd63;
            MASTER_TX_DATA_VALID = 1'b1;
            wait(MASTER_TX_BUSY);
            MASTER_TX_DATA_VALID = 1'b0;
            #1
            wait(!MASTER_TX_BUSY);
            //Frame 2 (Operand B)
            wait(!MASTER_TX_BUSY);
            MASTER_TX_P_DATA     = 'd7;
            MASTER_TX_DATA_VALID = 1'b1;
            wait(MASTER_TX_BUSY);
            MASTER_TX_DATA_VALID = 1'b0;
            #1
            wait(!MASTER_TX_BUSY);
            //Frame 3 (ALU Operation - Division)
            MASTER_TX_P_DATA     = 'd3;
            MASTER_TX_DATA_VALID = 1'b1;
            wait(MASTER_TX_BUSY);
            MASTER_TX_DATA_VALID = 1'b0;
            wait(MASTER_RX_DATA_VALID);
            if (MASTER_RX_P_DATA == 'd9)
            begin
                $display("Test case 7 passed");
            end
            else
            begin
                $display("Test case 7 failed");
            end
        end
    endtask
    
    task test_case8;
        begin
            //Frame 0 (ALU operation with operands command 0xCC)
            wait(!MASTER_TX_BUSY);
            MASTER_TX_P_DATA     = 'hCC;
            MASTER_TX_DATA_VALID = 1'b1;
            wait(MASTER_TX_BUSY);
            MASTER_TX_DATA_VALID = 1'b0;
            #1
            wait(!MASTER_TX_BUSY);
            //Frame 1 (Operand A)
            wait(!MASTER_TX_BUSY);
            MASTER_TX_P_DATA     = 'd250;
            MASTER_TX_DATA_VALID = 1'b1;
            wait(MASTER_TX_BUSY);
            MASTER_TX_DATA_VALID = 1'b0;
            #1
            wait(!MASTER_TX_BUSY);
            //Frame 2 (Operand B)
            wait(!MASTER_TX_BUSY);
            MASTER_TX_P_DATA     = 'd3;
            MASTER_TX_DATA_VALID = 1'b1;
            wait(MASTER_TX_BUSY);
            MASTER_TX_DATA_VALID = 1'b0;
            #1
            wait(!MASTER_TX_BUSY);
            //Frame 3 (ALU Operation - Multiplication)
            MASTER_TX_P_DATA     = 'd2;
            MASTER_TX_DATA_VALID = 1'b1;
            wait(MASTER_TX_BUSY);
            MASTER_TX_DATA_VALID = 1'b0;
            wait(MASTER_RX_DATA_VALID);
            if (MASTER_RX_P_DATA == 8'b11101110)
            begin
                @(posedge MASTER_RX_DATA_VALID);
                if (MASTER_RX_P_DATA == 'b10)
                begin
                    $display("Test case 8 passed");
                end
                else
                begin
                    $display("Test case 8 failed");
                end
            end
            else
            begin
                $display("Test case 8 failed");
            end
        end
    endtask
    
    task test_case9;
        begin
            //Frame 0 (ALU operation with operands command 0xCC)
            wait(!MASTER_TX_BUSY);
            MASTER_TX_P_DATA     = 'hCC;
            MASTER_TX_DATA_VALID = 1'b1;
            wait(MASTER_TX_BUSY);
            MASTER_TX_DATA_VALID = 1'b0;
            #1
            wait(!MASTER_TX_BUSY);
            //Frame 1 (Operand A) --> useless in this case since we will shift operand B only
            wait(!MASTER_TX_BUSY);
            MASTER_TX_P_DATA     = 'd0;
            MASTER_TX_DATA_VALID = 1'b1;
            wait(MASTER_TX_BUSY);
            MASTER_TX_DATA_VALID = 1'b0;
            #1
            wait(!MASTER_TX_BUSY);
            //Frame 2 (Operand B)
            wait(!MASTER_TX_BUSY);
            MASTER_TX_P_DATA     = 8'b11010110;
            MASTER_TX_DATA_VALID = 1'b1;
            wait(MASTER_TX_BUSY);
            MASTER_TX_DATA_VALID = 1'b0;
            #1
            wait(!MASTER_TX_BUSY);
            //Frame 3 (ALU Operation - Shift B to the left)
            MASTER_TX_P_DATA     = 'b1110;
            MASTER_TX_DATA_VALID = 1'b1;
            wait(MASTER_TX_BUSY);
            MASTER_TX_DATA_VALID = 1'b0;
            wait(MASTER_RX_DATA_VALID);
            if (MASTER_RX_P_DATA == 8'b10101100)
            begin
                @(posedge MASTER_RX_DATA_VALID);
                if (MASTER_RX_P_DATA == 'b1)
                begin
                    $display("Test case 9 passed");
                end
                else
                begin
                    $display("Test case 9 failed");
                end
            end
            else
            begin
                $display("Test case 9 failed");
            end
        end
    endtask
    
    assign TX_CLK_tb = DUT.U0_ClkDiv.o_div_clk;
    
    always
    begin
    #(REF_CLK_PERIOD/2.0) REF_CLK_tb = ~REF_CLK_tb;
    end
    
    always
    begin
    #(RX_CLK_PERIOD/2.0) RX_CLK_tb = ~RX_CLK_tb;
    end
    
    SYS_TOP DUT (
    .REF_CLK(REF_CLK_tb),
    .UART_CLK(RX_CLK_tb),
    .RST(RST_tb),
    .RX_IN(TOP_RX_IN_tb),
    .TX_OUT(TOP_TX_OUT_tb),
    .PARITY_ERROR(TOP_PARITY_ERROR_tb),
    .STOP_ERROR(TOP_STOP_ERROR_tb)
    );
    
    UART_Tx U0_Master_Tx(
    .CLK(DUT.U0_UART.TX_CLK),
    .RST(DUT.U0_UART.RST),
    .PAR_TYP(DUT.U0_UART.PAR_TYP),
    .PAR_EN(DUT.U0_UART.PAR_EN),
    .P_DATA(MASTER_TX_P_DATA),
    .DATA_VALID(MASTER_TX_DATA_VALID),
    .TX_OUT(TOP_RX_IN_tb),
    .Busy(MASTER_TX_BUSY)
    );
    
    UART_Rx U0_Master_Rx(
    .RX_IN(TOP_TX_OUT_tb),
    .prescale(DUT.U0_UART.PRESCALE_RX),
    .PAR_EN(DUT.U0_UART.PAR_EN),
    .PAR_TYP(DUT.U0_UART.PAR_TYP),
    .CLK(DUT.U0_UART.RX_CLK),
    .RST(DUT.U0_UART.RST),
    .P_DATA(MASTER_RX_P_DATA),
    .PAR_ERR(MASTER_RX_PAR_ERR),
    .STP_ERR(MASTER_RX_STP_ERR),
    .data_valid(MASTER_RX_DATA_VALID)
    );
    
endmodule
